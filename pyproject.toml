[build-system]
requires = [
  "hatchling >=1.27",  # SPDX version support
  "hatch-vcs",         # For version interpolation from tags/commit hashes
  "nipreps-versions",  # For the nipreps-calver scheme
]
build-backend = "hatchling.build"

[project]
name = "PROJECT"
description = "PROJECT_DESCRIPTION"
license-files = [
	"LICENSE"
]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
]

# Should generally be stable
dynamic = ["version"]
authors = [{name = "The NiPreps Developers", email = "nipreps@gmail.com"}]
license = "Apache-2.0"

# Choose one of the following, remove the other, then remove the [tool.spec0*] header
# SPEC-0 is the Scientific Python coordinated deprecation schedule.
# Generally we will want to use this.
# https://scientific-python.org/specs/spec-0000/
[tool.spec0]

# Updated October 2025; these should generally be updated quarterly
requires-python = ">=3.12"
dependencies = [
  "numpy >=2.0",
  "scipy >=1.12",
  "matplotlib >=3.9",
  "pandas >=2.2",
  "scikit-image >=0.23",
  "networkx >=3.3",
  "scikit-learn >=1.4",
  "seaborn >=0.13",
  # nipy and friends
  "nibabel >=5.2",
  "nipype >=1.9",
  "nilearn >=0.10",
  "nitransforms >=24.0",
  "pybids >= 0.17",
  # Common nipreps stack following 2 year minor series support
  "acres >=0.5",
  "templateflow >=24.0",
]

# speczeroplus follows SPEC-0 with the modification that Python is supported
# until its EOL, and base packages are supported for an additional year.
# This schedule was adopted by nibabel and several other packages.
# It is appropriate for libraries that we expect to receive broad usage,
# not end-user applications.
[tool.spec0plus]

# Updated October 2025; these should generally be updated quarterly
requires-python = ">=3.10"
dependencies = [
  "numpy >=1.24",
  "scipy >=1.10",
  "matplotlib >=3.7",
  "pandas >=2.0",
  "scikit-image >=0.20",
  "networkx >=3.0",
  "scikit-learn >=1.2",
  "seaborn >=0.13",
  # nipy and friends
  "nibabel >=5.0",
  "nipype >=1.9",
  "nilearn >=0.10",
  "nitransforms >=23.0",
  "pybids >= 0.16",
  # Common nipreps stack following 2 year minor series support
  "acres >=0.5",
  "templateflow >=23.0",
]

[project.urls]
Homepage = "https://github.com/nipreps/PROJECT"
Documentation = "https://PROJECT.readthedocs.io"
# Paper = "https://doi.org/DOI"
# "Docker Images" = "https://hub.docker.com/r/nipreps/PROJECT/tags/"

# Nipreps general
NiPreps = "https://www.nipreps.org/"

[project.optional-dependencies]
# These can generally be ratcheted forward, as long as they don't become
# incompatible with the speczeroplus requires-python minimum
test = [
  "coverage[toml] >= 7",
  "pytest >= 8.1",
  "pytest-cov >= 2.11",
  "pytest-env",
  "pytest-xdist >= 2.5",
]
# Include any dependencies that should be installed into a container
container = [
]

[project.scripts]



#
# Hatch configurations
#

[tool.hatch.metadata]
allow-direct-references = true  # Enables dependency to use "package @ URL"

[tool.hatch.build.targets.sdist]
exclude = [".git_archival.txt"]  # No longer needed in sdist

[tool.hatch.build.targets.wheel]
packages = ["PROJECT"]
exclude = [
    "PROJECT/data/tests/work",  # Large test data directory
]

##  The following two sections configure setuptools_scm in the hatch way

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "nipreps-calver" }

[tool.hatch.build.hooks.vcs]
version-file = "src/PROJECT/_version.py"


#
# Developer tool configurations
#

[tool.pytest.ini_options]
minversion = "6"
testpaths = ["PROJECT"]
log_cli_level = "INFO"
xfail_strict = true
norecursedirs = [".git"]
addopts = [
  "-svx",
  "-ra",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  # Config pytest-cov
  "--cov=PROJECT",
  "--cov-report=xml",
  "--cov-config=pyproject.toml",
]
doctest_optionflags = "ALLOW_UNICODE NORMALIZE_WHITESPACE ELLIPSIS"
env = "PYTHONHASHSEED=0"
filterwarnings = ["ignore::DeprecationWarning"]
junit_family = "xunit2"

# Recommended configurations are provided for style checkers/formatters,
# but the tools are disabled to prevent contributors' tools from modifying
# without following local guidelines.
# To adopt a convention, remove the DISABLE line.
# Note that ruff is configured in ruff.toml

[tool.black]
exclude = ".*"  # DISABLE
line-length = 99
skip-string-normalization = true

[tool.isort]
skip_glob = ["**/*.py"]  # DISABLE
profile = 'black'

[tool.flake8]
exclude = ['.*', '*']  # DISABLE

[tool.ruff]
exclude = ['.*', '*']  # DISABLE
line-length = 99

[tool.ruff.lint]
extend-select = [
  "I",
  "UP",
  "YTT",
  "S",
  "BLE",
  "B",
  "A",
  "C4",
  # "CPY",
  "DTZ",
  "T10",
  # "EM",
  "EXE",
  "FA",
  "ISC",
  "ICN",
  "LOG",
  "PIE",
  "PYI",
  "PT",
  "Q",
  # "SIM",
  # "TID",
  "FLY",
  # "PD",
  "PERF",
  "W",
  "PGH",
  "PLC",
  "PLE",
  "PLW",
  "FURB",
  "RUF",
]
ignore = [
  "S311",  # We are not using random for cryptographic purposes
  "S603",
  "PIE790",
  "PERF203",
  "PLC0415",
  "PLW2901",
  "RUF005",
  "RUF012",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.extend-per-file-ignores]
"*/test_*.py" = ["S101"]
"*/utils/debug.py" = ["A002", "T100"]
"docs/conf.py" = ["A001"]
"docs/sphinxext/github_link.py" = ["BLE001"]

[tool.ruff.format]
quote-style = "single"
